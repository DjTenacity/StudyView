apply plugin: 'com.android.application'
//声明构建的项目类型，这里当然是android了。是google的Android开发团队编写的插件，能够提供所有关于Android应用和依赖库的构建，打包和测试
//只需要使用android插件，再使用Java插件会报错.
//在local.properties中使用sdk.dir属性指定SDK路径，或者你可以使用ANDROID_HOME环境变量。

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

//添加如下代码，应用apt插件
//apply plugin: 'com.neenbedankt.android-apt'

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

android { //设置编译android项目的参数，接下来，我们的构建android项目的所有配置都在这里完成。
    // 默认情况下，只需要指定compileSdkVersion和buildtoolsVersion，compileSdkVersion
    // 指定使用哪个版本的sdk编译，
    compileSdkVersion 25
    //buildToolsVersion指定使用哪个版本的构建工具。
    buildToolsVersion '27.0.3'

    //defaultConfig方法包含了该app的核心属性，该属性会重写在AndroidManifest.xml中的对应属性。
    //资源代码和R文件必须拥有相同的包名，否则你的资源代码将需要改变，
    // 这就是为什么Android开发团队要将package name的两大功能拆分开。

    // 在AndroidManifest文件中定义的package name依然被用来作为包名和R文件的包名。
    // 而applicationid将被用在设备和各大应用商店中作为唯一的标示。
    defaultConfig {
        // 应用的包名
        applicationId "com.gdj.myview"
        minSdkVersion 17
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        //版本名后面添加一句话，意思就是flavor dimension 它的维度就是该版本号，这样维度就是都是统一的了
        flavorDimensions "versionCode"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        // 默认是yingyongbao的渠道
        manifestPlaceholders = [UMENG_CHANNEL_VALUE: "yingyongbao"]
        javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } }
    }

    // java版本
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs { //打签名包
//        debug {
//            storeFile file('E:\\keystore\\dumbo_release.jks')
//            storePassword RELEASE_KEYSTORE_PASSWORD
//            keyAlias 'release'
//            keyPassword RELEASE_KEY_PASSWORD
//        }
        release {
            storeFile file('E:\\keystore\\dumbo_release.jks')
            storePassword RELEASE_KEYSTORE_PASSWORD
            keyAlias 'release'
            keyPassword RELEASE_KEY_PASSWORD
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        // 输出apk名称为dumbo_v1.0_2015-01-15_yingyongbao.apk
                        def fileName = "myView_v${defaultConfig.versionName}_${releaseTime()}_${variant.productFlavors[0].name}.apk"
             //           output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }
    }

//  gradle在构建项目的时候,会自动的优先使用build-types下目录文件的目录,
//                  诸如,根据不同渠道,不同国家换个程序图标什么的,都只要放到目录下即可
    buildTypes {
//        release {   默认
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//        }
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            //是否进行混淆
            minifyEnabled false
            //混淆文件的位置
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            shrinkResources false
            manifestPlaceholders = [app_label: "@string/app_name"]
        }
    }
    dexOptions {
        jumboMode true
    }
    productFlavors {//Product Flavor{} 不只是能改包名那么简单，还能够对编译的源码目录进行切换。
        yingyongbao {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "yingyongbao"]
        }
        huawei {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "huawei"]
        }
    }
}
//configurations.all { 私人仓库
//    resolutionStrategy {
//        force 'cn.zhimadi.android.common.lib:android-common-lib:1.0.0-SNAPSHOT'
//        cacheDynamicVersionsFor 0, 'seconds'
//        cacheChangingModulesFor 0, 'seconds'
//    }
//}

//repositories {   针对camera-debug
//    flatDir {
//        dirs 'libs'
//    }
//}

dependencies {
    // 编译libs目录下的所有jar包
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
   // compile 'com.android.support:palette-v7:23.4.0-alpha1'
    implementation 'com.android.support:palette-v7:25.3.1'
    //compile 'com.android.support:appcompat-v7:25.3.1'
    implementation "com.android.support:appcompat-v7:$supportVersion"
    implementation "com.android.support:design:$supportVersion"
    implementation "com.android.support:recyclerview-v7:$supportVersion"
    implementation "com.android.support:cardview-v7:$supportVersion"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    //compile(name: 'camera-debug', ext: 'aar')   类似于 compile project(':camera')，不过camera是我改的源码，前者是原作者的封装
    // compile 'cn.zhimadi.android.common.lib:android-common-lib:1.0.0-SNAPSHOT'
    implementation 'com.jakewharton:butterknife:8.5.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'
    implementation 'com.lzy.widget:imagepicker:0.3.2'
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:v2.0.7'
    // circle image,圆形头像
    implementation 'de.hdodenhof:circleimageview:2.1.0'
    //dagger2
    //  compile 'com.google.dagger:dagger:2.4'
    //  apt 'com.google.dagger:dagger-compiler:2.4'
    //java注解
    //  compile 'org.glassfish:javax.annotation:10.0-b28'
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    // 编译extras目录下的camera模块
    implementation project(':camera')
    compile 'com.google.auto.service:auto-service:1.0-rc3'
//    compile project(path: ':djknife')
    implementation project(':springactionmenu')
}
